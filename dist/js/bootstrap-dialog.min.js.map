{"version":3,"sources":["../../src/js/dialog.js"],"names":["Default","button","type","label","dismiss","focus","Dialog","options","this","_confirmed","_options","_makeModal","_showModal","_btnOptions","btn","btns","k","_getInputValue","input","val","call","_input","$","_makeInput","tmpl","opts","tx","get","append","_this","header","title","message","buttons","forEach","action","_modal","appendTo","document","body","form","find","on","event","modal","setTimeout","e","remove","callback","arg","alert","confirm","prompt"],"mappings":"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","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap Dialog (v0.0.1): dialog.js\n * Licensed under MIT (https://github.com/iqbalfn/bootstrap-dialog/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport $ from 'jquery'\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME               = 'dialog'\nconst VERSION            = '0.0.1'\n\nconst Default = {\n    button: {\n        type    : 'light',\n        label   : 'Cancel',\n        dismiss : false,\n        focus   : false\n    }\n}\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Dialog {\n\n    constructor(options){\n        this._confirmed = false\n        this._options   = options\n        this._makeModal()\n        this._showModal()\n    }\n\n    // Getters\n\n    static get VERSION() {\n        return VERSION\n    }\n\n    static get Default() {\n        return Default\n    }\n\n    // Private\n\n    _btnOptions(btn){\n        let btns = Default.button\n\n        for(let k in btns){\n            if(typeof btn[k] === 'undefined')\n                btn[k] = btns[k]\n        }\n\n        return btn\n    }\n\n    _getInputValue(){\n        if(!this._options.input)\n            return\n\n        if(this._options.val)\n            return this._options.val.call(this, this._input)\n\n        return $(this._input).val()\n    }\n\n    _makeInput(){\n        let tmpl  = '';\n        let input = this._options.input\n\n        switch(input.type){\n            case 'textarea':\n                tmpl = `<textarea class=\"form-control bs-dialog-input\" id=\"bs-dialog-input\" rows=\"3\" placeholder=\"${input.label}\"></textarea>`\n            break;\n            \n            case 'select':\n                let opts = ''\n                for(let k in input)\n                    opts+= `<option value=\"${k}\">${input[k]}</option>`\n                tmpl = `<select class=\"custom-select my-1 mr-sm-2\" id=\"bs-dialog-input\">${opts}</select>`\n            break;\n\n            default:\n                tmpl = `<input type=\"${input.type}\" class=\"form-control bs-dialog-input\" id=\"bs-dialog-input\" placeholder=\"${input.label}\">`\n        }\n\n        let tx = `\n            <div class=\"form-group\">\n                <label for=\"bs-dialog-input\">${input.label}</label>\n            </div>`\n\n        this._input = $(tmpl).get(0)\n\n        return $(tx).append(this._input)\n    }\n\n    _makeModal(){\n        // headers\n        let header = ''\n        if(this._options.title){\n            header = `\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\">${this._options.title}</h5>\n                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                </div>`\n        }\n\n        // message\n        let message = ''\n        if(this._options.message)\n            message = `<p>${this._options.message}</p>`\n\n        // footer buttons\n        let buttons = ''\n        this._options.buttons.forEach(btn => {\n            btn = this._btnOptions(btn)\n\n            let action = btn.dismiss ? ' data-dismiss=\"modal\"' : ' data-confirm=\"true\"'\n            let focus  = btn.focus ? ' btn-focus-first' : ''\n            buttons+= `<button type=\"button\" class=\"btn btn-${btn.type}${focus}\"${action}>${btn.label}</button>`\n        })\n\n        let tmpl = `\n            <div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\">\n                <div class=\"modal-dialog\" role=\"document\">\n                    <div class=\"modal-content\">\n                        ${header}\n                        <div class=\"modal-body\">\n                            ${message}\n                        </div>\n                        <div class=\"modal-footer\">\n                            ${buttons}\n                        </div>\n                    </div>\n                </div>\n            </div>`\n\n        this._modal = $(tmpl).appendTo(document.body)\n\n        if(this._options.input){\n            let form = this._makeInput()\n            $(this._modal).find('.modal-body').append(form)\n        }\n\n        $(this._modal).on('click', '[data-confirm]', event => {\n            this._confirmed = true\n            $(this._modal).modal('hide')\n        })\n\n        $(this._modal).on('hidden.bs.modal', event => {\n            setTimeout(e => $(this._modal).remove(), 1000)\n\n            if(!this._options.callback)\n                return\n\n            let arg = this._confirmed\n            if(this._confirmed && this._options.input)\n                arg = this._getInputValue()\n\n            this._options.callback.call(this, arg)\n        })\n\n        $(this._modal).on('shown.bs.modal', event => {\n            if(this._input)\n                $(this._input).focus()\n            else\n                $(this._modal).find('.btn-focus-first').focus()\n        })\n    }\n\n    _showModal(){\n        $(this._modal).modal('show')\n    }\n\n    // Static\n\n    static alert(title, message, callback){\n        new Dialog({\n            title,\n            message,\n            callback,\n            input: null,\n            buttons: [\n                {\n                    type: 'primary',\n                    focus: true,\n                    label: 'Ok'\n                }\n            ]\n        })\n    }\n    \n    static confirm(title, message, callback){\n        new Dialog({\n            title,\n            message,\n            callback,\n            input: null,\n            buttons: [\n                {\n                    type: 'light',\n                    label: 'Cancel',\n                    dismiss: true\n                },\n                {\n                    type: 'primary',\n                    focus: true,\n                    label: 'Ok'\n                }\n            ]\n        })\n    }\n\n    static prompt(title, message, input, callback){\n        new Dialog({\n            title,\n            message,\n            callback,\n            input,\n            buttons: [\n                {\n                    type: 'light',\n                    label: 'Cancel',\n                    dismiss: true\n                },\n                {\n                    type: 'primary',\n                    focus: true,\n                    label: 'Ok'\n                }\n            ]\n        })\n    }\n}\n\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n$[NAME] = Dialog\n\nexport default Dialog"]}